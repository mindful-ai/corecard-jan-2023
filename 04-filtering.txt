Oracle SELECT DISTINCT for selecting unique items from a column

The following example retrieves all contact first names:

SELECT
  first_name
FROM
  contacts
ORDER BY
  first_name

To get unique contact first names, you add the DISTINCT keyword to the above SELECT statement 
as follows:

SELECT DISTINCT
  first_name
FROM
  contacts
ORDER BY
  first_name;

The following statement selects distinct product id and quantity from the order_items table:

SELECT
    DISTINCT product_id,
    quantity
FROM
    ORDER_ITEMS
ORDER BY
    product_id;

-----------------------------------------------------------------------

The WHERE clause appears after the FROM clause but before the ORDER BY clause. 
Following the WHERE keyword is the search_condition that defines a condition that 
returned rows must satisfy.

Besides the SELECT statement, you can use the WHERE clause in the DELETE or UPDATE 
statement to specify which rows to update or delete.

Selecting rows by using a simple equality operator

SELECT
    product_name,
    description,
    list_price,
    category_id
FROM
    products
WHERE
    product_name = 'Kingston';

Several operators are supported:


=	                     Equality
!=,<>	                 Inequality
>	                     Greater than
<	                    Less than
>=	                    Greater than or equal to
<=	                    Less than or equal to
IN	                    Equal to any value in a list of values
ANY/ SOME / ALL	        Compare a value to a list or subquery. It must be preceded by another operator such as =, >, <.
NOT IN	                Not equal to any value in a list of values
[NOT] BETWEEN n and m	Equivalent to [Not] >= n and <= y.
[NOT] EXISTS	        Return true if subquery returns at least one row
IS [NOT] NULL	        NULL test

To get products whose list prices are greater than 500, you use the following statement:

SELECT
    product_name,
    list_price
FROM
    products
WHERE
    list_price > 500;

To get all motherboards that belong to the category id 1 and have list prices greater than 500, 
you use the following statement

SELECT
    product_name,
    list_price
FROM
    products
WHERE
    list_price > 500
    AND category_id = 4;

To get the products whose list prices are between 650 and 680, 
you use the following statement:

SELECT
    product_name,
    list_price
FROM
    products
WHERE
    list_price BETWEEN 650 AND 680
ORDER BY
    list_price;

Selecting rows that are in a list of values

SELECT
    product_name,
    category_id
FROM
    products
WHERE
    category_id IN(1, 4)
ORDER BY
    product_name;

Selecting rows which contain value as a part of a string
The following statement retrieves product whose name starts with Asus

SELECT
	product_name,
	list_price
FROM
	products
WHERE
	product_name LIKE 'Asus%'
ORDER BY
	list_price;

-----------------------------------------------------------------------

Oracle AND to combine two Boolean expressions example
The following example finds orders of the customer 2 with the pending status

SELECT
	order_id,
	customer_id,
	status,
	order_date
FROM
	orders
WHERE
	status = 'Pending'
	AND customer_id = 2
ORDER BY
	order_date;

Oracle AND to combine more than two Boolean expressions example
You can use multiple AND operators to combine Boolean expressions.

For example, the following statement retrieves the orders that 
meet all the following conditions:

placed in 2017
is in charge of the salesman id 60
has the shipped status

SELECT
    order_id,
    customer_id,
    status,
    order_date
FROM
    orders
WHERE
    status = 'Shipped'
    AND salesman_id = 60
    AND EXTRACT(YEAR FROM order_date) = 2017
ORDER BY
    order_date;

The following query finds order placed by customer id 44 and has status canceled or pending.

SELECT
    order_id,
    customer_id,
    status,
    salesman_id,
    order_date
FROM
    orders
WHERE
    (
        status = 'Canceled'
        OR status = 'Pending'
    )
    AND customer_id = 44
ORDER BY
    order_date;

-----------------------------------------------------------------------

Introduction to Oracle FETCH clause
Some RDBMS such as MySQL and PostgreSQL have the LIMIT clause that allows you to 
retrieve a portion of rows generated by a query.

The following query uses the LIMIT clause to get the top 5 products with the highest inventory level:

SELECT
	product_name,
	quantity
FROM
	inventories
INNER JOIN products
		USING(product_id)
ORDER BY
	quantity DESC 
LIMIT 5;

Oracle Database does not have the LIMIT clause

SELECT
    product_name,
    quantity
FROM
    inventories
INNER JOIN products
        USING(product_id)
ORDER BY
    quantity DESC 
FETCH NEXT 5 ROWS ONLY;

Note the syntax:

[ OFFSET offset ROWS]
 FETCH  NEXT [  row_count | percent PERCENT  ] ROWS  [ ONLY | WITH TIES ] 

The OFFSET clause specifies the number of rows to skip before the row limiting starts
The FETCH clause specifies the number of rows or percentage of rows to return


The following statement returns the top 10 products with the highest inventory level:

SELECT
    product_name,
    quantity
FROM
    inventories
INNER JOIN products
        USING(product_id)
ORDER BY
    quantity DESC 
FETCH NEXT 10 ROWS ONLY;

The following query uses the row limiting clause with the WITH TIES option:

SELECT
	product_name,
	quantity
FROM
	inventories
INNER JOIN products
		USING(product_id)
ORDER BY
	quantity DESC 
FETCH NEXT 10 ROWS WITH TIES;

Note that: Even though the query requested 10 rows, because it had the WITH TIES option, 
the query returned two more additional rows. Notice that these two additional rows have 
the same value in the quantity column as the row 10.

The following query returns top 5% products with the highest inventory level:

SELECT
    product_name,
    quantity
FROM
    inventories
INNER JOIN products
        USING(product_id)
ORDER BY
    quantity DESC 
FETCH FIRST 5 PERCENT ROWS ONLY;

The following query skips the first 10 products with the highest level of inventory and returns the next 10 ones:

SELECT
	product_name,
	quantity
FROM
	inventories
INNER JOIN products
		USING(product_id)
ORDER BY
	quantity DESC 
OFFSET 10 ROWS 
FETCH NEXT 10 ROWS ONLY;

-----------------------------------------------------------------------

The Oracle IN operator determines whether a value matches any values 
in a list or a subquery.

The following statement finds all orders which are in charge of the salesman id 54, 55, and 56:

SELECT
    order_id,
    customer_id,
    status,
    salesman_id
FROM
    orders
WHERE
    salesman_id IN (
        54,
        55,
        56
    )
ORDER BY
    order_id;

Similarly, the following example retrieves sales orders whose statuses are Pending or Canceled:

SELECT
    order_id,
    customer_id,
    status,
    salesman_id
FROM
    orders
WHERE
    status IN(
        'Pending',
        'Canceled'
    )
ORDER BY
    order_id;

The following example returns the id, first name, and last name of salesmen who are in charge of orders that were canceled

SELECT
    employee_id,
    first_name,
    last_name
FROM
    employees
WHERE
    employee_id IN(
        SELECT
            DISTINCT salesman_id
        FROM
            orders
        WHERE
            status = 'Canceled'
    );
ORDER BY
    first_Name;



-----------------------------------------------------------------------
The BETWEEN operator allows you to specify a range to test. When you use the BETWEEN 
operator to form a search condition for rows returned by a SELECT statement, 
only rows whose values are in the specified range are returned.


The following statement returns products whose standard costs are between 500 and 600:

SELECT
    product_name,
    standard_cost
FROM
    products
WHERE
    standard_cost BETWEEN 500 AND 600
ORDER BY
    standard_cost;

o query products whose standard costs are not between 500 and 600, 
you add the NOT operator to the above query as follows:

SELECT
    product_name,
    standard_cost
FROM
    products
WHERE
    standard_cost NOT BETWEEN 500 AND 600
ORDER BY
    product_name;

SELECT
    order_id,
    customer_id,
    status,
    order_date
FROM
    orders
WHERE
    order_date BETWEEN DATE '2016-12-01' AND DATE '2016-12-31'
ORDER BY
    order_date;

-----------------------------------------------------------------------

Sometimes, you want to query data based on a specified pattern. For example, 
you may want to find contacts whose last names start with 'St' or first names end with 'er'.
In this case, you use the Oracle LIKE operator.

The pattern is a string to search for in the expression. The pattern includes the following wildcard characters:

% (percent) matches any string of zero or more character.
_ (underscore) matches any single character.


% wildcard character examples
The following example uses the % wildcard to find the phones of contacts 
whose last names start with 'St':

SELECT
    first_name,
    last_name,
    phone
FROM
    contacts
WHERE
    last_name LIKE 'St%'
ORDER BY
    last_name;

The following statement finds emails of contacts whose 
first names start with CH:

SELECT
    first_name,
    last_name,
    email
FROM
    contacts
WHERE
    UPPER( first_name ) LIKE 'CH%';
ORDER BY
    first_name;


 _ wildcard character examples
The following example finds the phone numbers and emails of contacts whose 
first names have the following pattern 'Je_i':

SELECT
    first_name,
    last_name,
    email,
    phone
FROM
    contacts
WHERE
    first_name LIKE 'Je_i'
ORDER BY 
    first_name;

Mixed wildcard characters example
You can mix the wildcard characters in a pattern. For example, the following 
statement finds contacts whose first names start with the string Je followed by 
two characters and then any number of characters. In other words, it will match 
any last name that starts with Je and has at least 3 characters:

SELECT
    first_name,
    last_name,
    email,
    phone
FROM
    contacts
WHERE
    first_name LIKE 'Je_%';

The ESCAPE clause allows you to find strings that include one or more wildcard characters.

For example, a table may include data that has percent % character such as discount values, 
depreciation rate.

To search for the string 25%, you use the ESCAPE clause as follows:
LIKE '%25!%%' ESCAPE '!'


CREATE TABLE discounts
  (
    product_id NUMBER, 
    discount_message VARCHAR2( 255 ) NOT NULL,
    PRIMARY KEY( product_id )
  );


INSERT INTO discounts(product_id, discount_message)
VALUES(1,
       'Buy 1 and Get 25% OFF on 2nd ');

INSERT INTO discounts(product_id, discount_message)
VALUES(2,
       'Buy 2 and Get 50% OFF on 3rd ');


INSERT INTO discounts(product_id, discount_message)
VALUES(3,
       'Buy 3 Get 1 free');


SELECT
	product_id,
	discount_message
FROM
	discounts
WHERE
	discount_message LIKE '%25!%%' ESCAPE '!';

-----------------------------------------------------------------------
In the database world, NULL is special. It is a marker for missing information or 
the information is not applicable.

NULL is special in the sense that it is not a value like a number, character string, 
or datetime, therefore, you cannot compare it with any other values like zero (0) or 
an empty string (”). Generally speaking, NULL is even not equal to NULL.

SELECT * FROM orders 
WHERE salesman_id = NULL
ORDER BY order_date DESC;




-----------------------------------------------------------------------



-----------------------------------------------------------------------
