
_____________________________________________________________________________________________ Set 3

Oracle Drop Column using SET UNUSED COLUMN clause
The process of dropping a column from a big table can be time and resource consuming. 
Therefore, we typically drop the column logically by using the ALTER TABLE SET UNUSED COLUMN

Once you execute the statement, the column is no longer visible for accessing

CREATE TABLE suppliers (
    supplier_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    contact_name VARCHAR2(255) NOT NULL,
    company_name VARCHAR2(255),
    phone VARCHAR2(100) NOT NULL,
    email VARCHAR2(255) NOT NULL,
    fax VARCHAR2(100) NOT NULL,
    PRIMARY KEY(supplier_id)
);

INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Solomon F. Zamora',
        'Elit LLP',
        '1-245-616-6781',
        'enim.condimentum@pellentesqueeget.org',
        '1-593-653-6421');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Haley Franco',
        'Ante Vivamus Limited',
        '1-754-597-2827',
        'Nunc@ac.com',
        '1-167-362-9592');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Gail X. Tyson',
        'Vulputate Velit Eu Inc.',
        '1-331-448-8406',
        'sem@gravidasit.edu',
        '1-886-556-8494');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Alec N. Strickland',
        'In At Associates',
        '1-467-132-4527',
        'Lorem@sedtortor.com',
        '1-735-818-0914');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Britanni Holt',
        'Magna Cras Convallis Corp.',
        '1-842-554-5106',
        'varius@seddictumeleifend.ca',
        '1-381-532-1632');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Audra O. Ingram',
        'Commodo LLP',
        '1-934-490-5667',
        'dictum.augue.malesuada@idmagnaet.net',
        '1-225-217-4699');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Cody K. Chapman',
        'Tempor Arcu Inc.',
        '1-349-383-6623',
        'non.arcu.Vivamus@rutrumnon.co.uk',
        '1-824-229-3521');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Tobias Merritt',
        'Amet Risus Company',
        '1-457-675-2547',
        'felis@ut.net',
        '1-404-101-9940');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Ryder G. Vega',
        'Massa LLC',
        '1-655-465-4319',
        'dui.nec@convalliserateget.co.uk',
        '1-282-381-9477');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Arthur Woods',
        'Donec Elementum Lorem Foundation',
        '1-406-810-9583',
        'eros.turpis.non@anteMaecenasmi.co.uk',
        '1-462-765-8157');


INSERT INTO suppliers (contact_name,company_name,phone,email,fax)
VALUES ('Lael Snider',
        'Ultricies Adipiscing Enim Corporation',
        '1-252-634-4780',
        'natoque.penatibus@in.com',
        '1-986-508-6373');


ALTER TABLE suppliers 
SET UNUSED COLUMN fax;

From now on, you cannot access the fax column anymore:

SELECT
    *
FROM
    suppliers;

You can view the number of unused columns per table from the DBA_UNUSED_COL_TABS view:

SELECT
    *
FROM
    DBA_UNUSED_COL_TABS;

To drop the all unused columns from the suppliers table, you use the following statement:

ALTER TABLE suppliers 
DROP UNUSED COLUMNS;

------------------------------------------------------------------

Oracle Drop Column using DROP COLUMN clause
To drop a column from a table physically:

ALTER TABLE
    suppliers 
DROP (
        email,
        phone
    );

_____________________________________________________________________________________________ Set 4

Drop table

First, indicate the table and its schema that you want to drop after the DROP TABLE clause. 
If you don’t specify the schema name explicitly, the statement assumes that you are removing the 
table from your own schema.

Second, specify CASCADE CONSTRAINTS clause to remove all referential integrity constraints 
which refer to primary and unique keys in the table. In case such referential integrity constraints 
exist and you don’t use this clause, Oracle returns an error and stops removing the table.

Third, specify PURGE clause if you want to drop the table and release the space associated with 
it at once. By using the PURGE clause, Oracle will not place the table and its dependent objects 
into the recycle bin. Notice that the PURGE clause does not allow you to roll back or recover the 
table that you dropped. Therefore, it is useful if you don’t want the sensitive data to appear 
in the recycle bin.


CREATE TABLE brands(
    brand_id NUMBER PRIMARY KEY,
    brand_name varchar2(50)
);

CREATE TABLE cars(
    car_id NUMBER PRIMARY KEY,
    make VARCHAR(50) NOT NULL,
    model VARCHAR(50) NOT NULL,
    year NUMBER NOT NULL,
    plate_number VARCHAR(25),
    brand_id NUMBER NOT NULL,

    CONSTRAINT fk_brand 
    FOREIGN KEY (brand_id) 
    REFERENCES brands(brand_id) ON DELETE CASCADE
)

DROP TABLE brands;

This results in error. This is because the primary key of 
the brands table is currently referenced by the brand_id column in the cars table.


To drop the brands table, you must use the CASCADE CONSTRAINTS clause as follows:

DROP TABLE brands CASCADE CONSTRAINTS;

This statement dropped not only the brands table but also the foreign key 
constraint fk_brand from the cars table.


------------------------------------------------- 

Dropping multiple tables

CREATE TABLE test_1(c1 VARCHAR2(50));
CREATE TABLE test_2(c1 VARCHAR2(50));
CREATE TABLE test_3(c1 VARCHAR2(50));

PL/SQL code for dropping multiple tables

BEGIN
  FOR rec IN
    (
      SELECT
        table_name
      FROM
        all_tables
      WHERE
        table_name LIKE 'TEST_%'
    )
  LOOP
    EXECUTE immediate 'DROP TABLE  '||rec.table_name || ' CASCADE CONSTRAINTS';
  END LOOP;
END;
/
_____________________________________________________________________________________________ Set 5

Introduction to Oracle TRUNCATE TABLE statement

For a table with a small number of rows, the DELETE statement does a good job. 
However, when you have a table with a large number of rows, using the DELETE statement 
to remove all data is not efficient.

the TRUNCATE TABLE CASCADE statement deletes all rows from the table_name, and 
recursively truncates down the associated tables in the chain.

Note that the TRUNCATE TABLE CASCADE statement requires the foreign key constraints 
defined with the ON DELETE CASCADE clause to work.

The MATERIALIZED VIEW LOG clause allows you to specify whether a materialized 
view log defined on the table is to be preserved or purged when the table is truncated. 
By default, the material view log is preserved.

The STORAGE clause allows you to choose either drop or reuse storage freed by the 
truncated rows and associated indexes if any. By default, the storage is dropped.

CREATE TABLE quotations (
    quotation_no NUMERIC GENERATED BY DEFAULT AS IDENTITY,
    customer_id NUMERIC NOT NULL,
    valid_from DATE NOT NULL,
    valid_to DATE NOT NULL,
    PRIMARY KEY(quotation_no)
);

CREATE TABLE quotation_items (
    quotation_no NUMERIC,
    item_no NUMERIC ,
    product_id NUMERIC NOT NULL,
    qty NUMERIC NOT NULL,
    price NUMERIC(9 , 2 ) NOT NULL,
    PRIMARY KEY (quotation_no , item_no),
    CONSTRAINT fk_quotation FOREIGN KEY (quotation_no)
        REFERENCES quotations
        ON DELETE CASCADE
);


INSERT INTO quotations(customer_id, valid_from, valid_to)
VALUES(100, DATE '2017-09-01', DATE '2017-12-01');

INSERT INTO quotation_items(quotation_no, item_no, product_id, qty, price)
VALUES(1,1,1001,10,90.5);

INSERT INTO quotation_items(quotation_no, item_no, product_id, qty, price)
VALUES(1,2,1002,20,200.5);

INSERT INTO quotation_items(quotation_no, item_no, product_id, qty, price)
VALUES(1,3,1003,30, 150.5);

TRUNCATE TABLE quotations;

The statement failed and Oracle returned the following error:

SQL Error: ORA-02266: unique/primary keys in table referenced by enabled foreign keys

To fix this, you add the CASCADE clause to the TRUNCATE TABLE statement above:

TRUNCATE TABLE quotations CASCADE;

This statement deleted data from not only quotations table but also quotation_items table.
Finally, verify whether the data from both quotations and quotation_items are deleted or not:

SELECT
  *
FROM
  quotations;

SELECT
  *
FROM
  quotation_items;


Notice that if we did not specify the ON DELETE CASCADE for the fk_quotation constraint, 
the TRUNCATE TABLE CASCADE statement above would fail.