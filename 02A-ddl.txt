CREATE TABLE

First, specify the table name and schema name to which the new table belongs on the CREATE TABLE clause.
Second, list all columns of the table within the parentheses. In case a table has multiple columns, 
you need to separate them by commas (,). A column definition includes the column name followed by its 
data type e.g., NUMBER, VARCHAR2, and a column constraint such as NOT NULL, primary key, check.
Third, add table constraints if applicable e.g., primary key, foreign key, check.

CREATE TABLE ot.persons(
    person_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    PRIMARY KEY(person_id)
);

___________________________________________________________________________________________________

ALTER TABLE
To modify the structure of an existing table, you use the ALTER TABLE statement. 
The ALTER TABLE statement allows you to:

Add one or more columns
Modify column definition
Drop one or more columns
Rename columns
Rename table

-------------------------------------------------

ALTER TABLE persons ADD birthdate DATE NOT NULL;
DESC persons; 

ALTER TABLE persons 
ADD (
    phone VARCHAR(20),
    email VARCHAR(100)
);
DESC persons;

-------------------------------------------------

The following statement changes the birthdate column to a null-able column:

ALTER TABLE persons MODIFY birthdate DATE NULL;
DESC persons;

ALTER TABLE persons MODIFY(
    phone VARCHAR2(20) NOT NULL,
    email VARCHAR2(255) NOT NULL
);
DESC persons;

-------------------------------------------------

To remove an existing column from a table, you use the following

ALTER TABLE persons
DROP
  COLUMN birthdate;

ALTER TABLE persons
DROP
  ( email, phone );

DESC persons;

-------------------------------------------------

To rename a column:

ALTER TABLE persons 
RENAME COLUMN first_name TO forename;
DESC persons;

-------------------------------------------------

To rename a table:
ALTER TABLE persons RENAME TO people;
DESC persons; -- What happens?

-------------------------------------------------


you want to record the time at which a row is created and updated. 
To do so, you need to add two columns created_at and updated_at as follows


ALTER TABLE
    people ADD(
        created_at TIMESTAMP WITH TIME ZONE NOT NULL,
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL
    );
___________________________________________________________________________________________________


A virtual column is a table column whose values are calculated automatically 
using other column values, or another deterministic expression.

--First, create a table named parts which has a virtual column

CREATE TABLE parts(
    part_id INT GENERATED ALWAYS AS IDENTITY,
    part_name VARCHAR2(50) NOT NULL,
    capacity INT NOT NULL,
    cost DEC(15,2) NOT NULL,
    list_price DEC(15,2) NOT NULL,
    gross_margin AS ((list_price - cost) / cost), -- virtual column
    PRIMARY KEY(part_id)
);

--Second, insert some rows into the parts table

INSERT INTO parts(part_name, capacity, cost, list_price)
VALUES('G.SKILL TridentZ RGB Series 16GB (2 x 8GB)', 16, 95,105);

INSERT INTO parts(part_name, capacity, cost, list_price)
VALUES('G.SKILL TridentZ RGB Series 32GB (4x8GB)', 32, 205,220);

INSERT INTO parts(part_name, capacity, cost, list_price)
VALUES('G.SKILL TridentZ RGB Series 16GB (1 x 8GB)', 8, 50,70);

--Third, query data:

SELECT * FROM parts;

--Adding a virtual column to an existing table example

ALTER TABLE parts
ADD (
    capacity_description AS (
            CASE 
                WHEN capacity <= 8 THEN 'Small' 
                WHEN capacity > 8 AND capacity <= 16 THEN 'Medium'
                WHEN capacity > 16 THEN 'Large'
            END)
)

SELECT * FROM parts;

-- Selecting all virtual columns

SELECT 
    column_name, 
    virtual_column,
    data_default
FROM 
    all_tab_cols -- use this to select all the virtual columns
WHERE owner = 'OT' 
AND table_name = 'PARTS';


_____________________________________________________________________________________________ Set 2

Oracle Database allows you to perform many actions but the following are the main ones:

Modify the column’s visibility
Allow or not allow null values
Shorten or widen the size of the column
Change the default value of a column
Modify expression of the virtual columns

CREATE TABLE accounts (
    account_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR2(25) NOT NULL,
    last_name VARCHAR2(25) NOT NULL,
    email VARCHAR2(100),
    phone VARCHAR2(12) ,
    full_name VARCHAR2(51) GENERATED ALWAYS AS( 
            first_name || ' ' || last_name
    ),
    PRIMARY KEY(account_id)
);

INSERT INTO accounts(first_name,last_name,phone)
VALUES('Trinity',
       'Knox',
       '410-555-0197');


INSERT INTO accounts(first_name,last_name,phone)
VALUES('Mellissa',
       'Porter',
       '410-555-0198');


INSERT INTO accounts(first_name,last_name,phone)
VALUES('Leeanna',
       'Bowman',
       '410-555-0199');

SELECT
    *
FROM
    accounts;

----------------------------------------------------------- 

Modifying column visibility:
In Oracle Database 12c, you can define table columns as invisible or visible. 
Invisible columns are not available for the query like SELECT or DESCRIBE

ALTER TABLE accounts 
MODIFY full_name INVISIBLE;

SELECT * FROM accounts;

ALTER TABLE accounts 
MODIFY full_name VISIBLE;

SELECT * FROM accounts;

-----------------------------------------------------------

Allow or not allow null example
The following statement changes the email column to accept non-null values:

ALTER TABLE accounts 
MODIFY email VARCHAR2( 100 ) NOT NULL;

However, Oracle issued the following error:

SQL Error: ORA-02296: cannot enable (OT.) - null values found


Because when you changed a column from nullable to non-nullable, 
you must ensure that the existing data meets the new constraint.

To fix this, we update the values for the email column first:

UPDATE 
    accounts
SET 
    email = LOWER(first_name || '.' || last_name || '@oracletutorial.com') ;


Note that the LOWER() function converts a string to lowercase.

And then change the column’s constraint:

ALTER TABLE accounts 
MODIFY email VARCHAR2( 100 ) NOT NULL;


Now, it should work as expected.

-----------------------------------------------------------

Widen or shorten the size of a column example
Suppose, we want to add international code to the phone numbers. 
Before doing it, we must widen the size of the phone column by using the following statement:

ALTER TABLE accounts 
MODIFY phone VARCHAR2( 15 );


Now, we can update the phone numbers:

UPDATE
    accounts
SET
    phone = '+1-' || phone;


The following statement verifies the update:

SELECT
    *
FROM
    accounts;


Oracle ALTER TABLE MODIFY column - widen column size example

To shorten the size of a column, you make sure that all data in the column fits the new size.

For example, we try to shorten the size of the phone column down to 12 characters:

ALTER TABLE accounts 
MODIFY phone VARCHAR2( 12 );

Oracle Database issued the following error:

SQL Error: ORA-01441: cannot decrease column length because some  value is too big


To fix this, first, we should remove the international code from the phone numbers:

UPDATE
    accounts
SET
    phone = REPLACE(
        phone,
        '+1-',
        ''
    );

The REPLACE() function replaces a substring by a new substring. 
In this case, it replaces the ‘+1-‘ by an empty string.

And then shorten the size of the phone column:

ALTER TABLE accounts 
MODIFY phone VARCHAR2( 12 );

-----------------------------------------------------------

Modify virtual column
Suppose, we the full name in the following format:

last_name, first_name


To do this, we can change the expression of the virtual column full_name as follows:

ALTER TABLE accounts 
MODIFY full_name VARCHAR2(52) 
GENERATED ALWAYS AS (last_name || ', ' || first_name);

The following statement verifies the modification:

  SELECT
    *
FROM
    accounts;

-----------------------------------------------------------

Modify the default value of a column
Let’s add a new column named status to the accounts table with default value 1.

ALTER TABLE accounts
ADD status NUMBER( 1, 0 ) DEFAULT 1 NOT NULL ;

Oracle ALTER TABLE MODIFY Column - Add status column
Once you executed the statement, the values in the status column are set to 1 
for all existing rows in the accounts table.

To change the default value of the status column to 0, you use the following statement:

ALTER TABLE accounts 
MODIFY status DEFAULT 0;


We can add a new row to the accounts table to check whether the default value 
of the status column is 0 or 1:

INSERT INTO accounts ( first_name, last_name, email, phone )
VALUES ( 'Julia',
         'Madden',
         'julia.madden@oracletutorial.com',
         '410-555-0200' );

Query data from the accounts table:

SELECT
  *
FROM
  accounts;

As you can see, the value in the status column for the account with id 4 is 0 as expected.






___________________________________________________________________________________________________


Exercise:

1. Create a table with member_id, first_name, last_name
2. Add columns age, address and date_of_birth
3. Insert some data (10 rows) into it
3. Create a virtual column called age_group with following constraints:
    age < 10 -> toddler
    10 < age < 19 -> teenager
    20 < age < 35 -> young adult
    35 < age < 45 -> adult
    45 < age < 60 -> middle aged
    60 + -> senior